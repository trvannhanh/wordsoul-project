// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WordSoulApi.Data;

#nullable disable

namespace WordSoulApi.Migrations
{
    [DbContext(typeof(WordSoulDbContext))]
    [Migration("20250814161506_AddRefreshTokens")]
    partial class AddRefreshTokens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WordSoulApi.Models.Entities.AnswerRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuizQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("AnswerRecords");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.LearningSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VocabularySetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VocabularySetId");

                    b.ToTable("LearningSessions");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.PrimitiveCollection<string>("Options")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<int>("VocabularyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VocabularyId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.SessionVocabulary", b =>
                {
                    b.Property<int>("LearningSessionId")
                        .HasColumnType("int");

                    b.Property<int>("VocabularyId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("LearningSessionId", "VocabularyId");

                    b.HasIndex("VocabularyId");

                    b.ToTable("SessionVocabularies");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.SetRewardPet", b =>
                {
                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<int>("VocabularySetId")
                        .HasColumnType("int");

                    b.Property<double>("DropRate")
                        .HasColumnType("float");

                    b.HasKey("PetId", "VocabularySetId");

                    b.HasIndex("VocabularySetId");

                    b.ToTable("SetRewardPets");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.SetVocabulary", b =>
                {
                    b.Property<int>("VocabularySetId")
                        .HasColumnType("int");

                    b.Property<int>("VocabularyId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("VocabularySetId", "VocabularyId");

                    b.HasIndex("VocabularyId");

                    b.ToTable("SetVocabularies");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.UserOwnedPet", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "PetId");

                    b.HasIndex("PetId");

                    b.ToTable("UserOwnedPets");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.UserVocabularyProgress", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VocabularyId")
                        .HasColumnType("int");

                    b.Property<int>("CorrectAttempt")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextReviewTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("int");

                    b.Property<int>("TotalAttempt")
                        .HasColumnType("int");

                    b.HasKey("UserId", "VocabularyId");

                    b.HasIndex("VocabularyId");

                    b.ToTable("UserVocabularyProgresses");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.UserVocabularySet", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VocabularySetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "VocabularySetId");

                    b.HasIndex("VocabularySetId");

                    b.ToTable("UserVocabularySets");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.Vocabulary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CEFRLevel")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExampleSentence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartOfSpeech")
                        .HasColumnType("int");

                    b.Property<string>("PronunciationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vocabularies");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.VocabularySet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Theme")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VocabularySets");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.AnswerRecord", b =>
                {
                    b.HasOne("WordSoulApi.Models.Entities.QuizQuestion", "QuizQuestion")
                        .WithMany("AnswerRecords")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordSoulApi.Models.Entities.User", "User")
                        .WithMany("AnswerRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.LearningSession", b =>
                {
                    b.HasOne("WordSoulApi.Models.Entities.User", "User")
                        .WithMany("LearningSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordSoulApi.Models.Entities.VocabularySet", "VocabularySet")
                        .WithMany("LearningSessions")
                        .HasForeignKey("VocabularySetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VocabularySet");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.QuizQuestion", b =>
                {
                    b.HasOne("WordSoulApi.Models.Entities.Vocabulary", "Vocabulary")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("VocabularyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vocabulary");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.SessionVocabulary", b =>
                {
                    b.HasOne("WordSoulApi.Models.Entities.LearningSession", "LearningSession")
                        .WithMany("SessionVocabularies")
                        .HasForeignKey("LearningSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordSoulApi.Models.Entities.Vocabulary", "Vocabulary")
                        .WithMany("SessionVocabularies")
                        .HasForeignKey("VocabularyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearningSession");

                    b.Navigation("Vocabulary");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.SetRewardPet", b =>
                {
                    b.HasOne("WordSoulApi.Models.Entities.Pet", "Pet")
                        .WithMany("SetRewardPets")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordSoulApi.Models.Entities.VocabularySet", "VocabularySet")
                        .WithMany("SetRewardPets")
                        .HasForeignKey("VocabularySetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("VocabularySet");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.SetVocabulary", b =>
                {
                    b.HasOne("WordSoulApi.Models.Entities.Vocabulary", "Vocabulary")
                        .WithMany("SetVocabularies")
                        .HasForeignKey("VocabularyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordSoulApi.Models.Entities.VocabularySet", "VocabularySet")
                        .WithMany("SetVocabularies")
                        .HasForeignKey("VocabularySetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vocabulary");

                    b.Navigation("VocabularySet");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.UserOwnedPet", b =>
                {
                    b.HasOne("WordSoulApi.Models.Entities.Pet", "Pet")
                        .WithMany("UserOwnedPets")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WordSoulApi.Models.Entities.User", "User")
                        .WithMany("UserOwnedPets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.UserVocabularyProgress", b =>
                {
                    b.HasOne("WordSoulApi.Models.Entities.User", "User")
                        .WithMany("UserVocabularyProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordSoulApi.Models.Entities.Vocabulary", "Vocabulary")
                        .WithMany("UserVocabularyProgresses")
                        .HasForeignKey("VocabularyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vocabulary");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.UserVocabularySet", b =>
                {
                    b.HasOne("WordSoulApi.Models.Entities.User", "User")
                        .WithMany("UserVocabularySets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordSoulApi.Models.Entities.VocabularySet", "VocabularySet")
                        .WithMany("UserVocabularySets")
                        .HasForeignKey("VocabularySetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VocabularySet");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.LearningSession", b =>
                {
                    b.Navigation("SessionVocabularies");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.Pet", b =>
                {
                    b.Navigation("SetRewardPets");

                    b.Navigation("UserOwnedPets");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.QuizQuestion", b =>
                {
                    b.Navigation("AnswerRecords");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.User", b =>
                {
                    b.Navigation("AnswerRecords");

                    b.Navigation("LearningSessions");

                    b.Navigation("UserOwnedPets");

                    b.Navigation("UserVocabularyProgresses");

                    b.Navigation("UserVocabularySets");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.Vocabulary", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("SessionVocabularies");

                    b.Navigation("SetVocabularies");

                    b.Navigation("UserVocabularyProgresses");
                });

            modelBuilder.Entity("WordSoulApi.Models.Entities.VocabularySet", b =>
                {
                    b.Navigation("LearningSessions");

                    b.Navigation("SetRewardPets");

                    b.Navigation("SetVocabularies");

                    b.Navigation("UserVocabularySets");
                });
#pragma warning restore 612, 618
        }
    }
}
